name: "Commit"

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  checks: write
  security-events: write
  pull-requests: write

jobs:
  unit-tests:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - uses: ./.github/actions/gradle-task-run
        with:
          gradle-tasks: "testDebugUnitTest"
          reuse-configuration-cache: true
          gradle-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

  validate-xml:
    name: "Validate XML"
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - name: "Run XMLStarlet"
        shell: "bash"
        run: |
          sudo apt-get update
          sudo apt-get install xmlstarlet
          scripts/xml/validate_xml.sh

  ktfmt:
    name: "ktfmt"
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - name: "Run ktfmt"
        shell: "bash"
        run: |
          INSTALL_KTFMT_WHEN_MISSING=true ONLY_TOUCHED_FILES=false scripts/ktfmt/validate_ktfmt.sh

  validate-shell-scripts:
    name: "Validate Shell Scripts"
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - name: "Run ShellCheck"
        shell: "bash"
        run: |
          scripts/shellcheck/validate_shell_scripts.sh

  build-library:
    name: "Build Library"
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - uses: ./.github/actions/gradle-task-run
        with:
          gradle-tasks: ":lib:compileDebugKotlin"
          reuse-configuration-cache: true
          gradle-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

      - name: "Store AAR"
        uses: actions/upload-artifact@v4.4.0
        with:
          name: aar
          path: lib/build/outputs/aar/lib-debug.aar

  build-samples:
    name: "Build Sample Apps"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - sample: simple
            apk-name: simple-debug.apk
            experimental: false
          - sample: hilt-integration
            apk-name: hilt-integration-debug.apk
            experimental: false  # KSP migration is now working
      fail-fast: false  # Continue building other samples if one fails
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - uses: ./.github/actions/gradle-task-run
        with:
          gradle-tasks: ":samples:${{ matrix.sample }}:assembleDebug"
          reuse-configuration-cache: true
          gradle-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

      - name: "Store Sample APK"
        uses: actions/upload-artifact@v4.4.0
        if: success()  # Only upload if build succeeded
        with:
          name: sample-${{ matrix.sample }}-apk
          path: samples/${{ matrix.sample }}/build/outputs/apk/debug/${{ matrix.apk-name }}

  build-base-samples:
    name: "Build Base Sample Apps"
    if: github.ref_name != 'main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - sample: simple
            apk-name: simple-debug.apk
            base-apk-name: simple-base-debug.apk
            experimental: false
          - sample: hilt-integration
            apk-name: hilt-integration-debug.apk
            base-apk-name: hilt-integration-base-debug.apk
            experimental: false  # KSP migration is now working
      fail-fast: false  # Continue building other samples if one fails
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ github.event.pull_request.base.sha }}

      - name: "Build Sample APK from PR base SHA"
        uses: ./.github/actions/gradle-task-run
        with:
          gradle-tasks: ":samples:${{ matrix.sample }}:assembleDebug"
          reuse-configuration-cache: true
          gradle-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          optional-suffix: "-base"

      - name: "Change APK file name"
        shell: "bash"
        if: success()  # Only run if build succeeded
        run: |
          mv samples/${{ matrix.sample }}/build/outputs/apk/debug/${{ matrix.apk-name }} samples/${{ matrix.sample }}/build/outputs/apk/debug/${{ matrix.base-apk-name }}

      - name: "Store Base Sample APK"
        uses: actions/upload-artifact@v4.4.0
        if: success()  # Only upload if build succeeded
        with:
          name: base-sample-${{ matrix.sample }}-apk
          path: samples/${{ matrix.sample }}/build/outputs/apk/debug/${{ matrix.base-apk-name }}

  build-test-apks:
    name: "Build Test APKs"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - sample: simple
            test-apk-name: simple-debug-androidTest.apk
            experimental: false
          - sample: hilt-integration
            test-apk-name: hilt-integration-debug-androidTest.apk
            experimental: false  # KSP migration is now working
      fail-fast: false  # Continue building other samples if one fails
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - uses: ./.github/actions/gradle-task-run
        with:
          gradle-tasks: ":samples:${{ matrix.sample }}:assembleAndroidTest"
          reuse-configuration-cache: false
          optional-suffix: "-test"

      - name: "Store Test APK"
        uses: actions/upload-artifact@v4.4.0
        if: success()  # Only upload if build succeeded
        with:
          name: test-${{ matrix.sample }}-apk
          path: samples/${{ matrix.sample }}/build/outputs/apk/androidTest/debug/${{ matrix.test-apk-name }}

  diff-apk-from-base:
    name: "Diff APK from Base"
    runs-on: ubuntu-latest
    if: github.secret_source == 'Actions' && github.ref_name != 'main'
    strategy:
      matrix:
        include:
          - sample: simple
            apk-name: simple-debug.apk
            base-apk-name: simple-base-debug.apk
          - sample: hilt-integration
            apk-name: hilt-integration-debug.apk
            base-apk-name: hilt-integration-base-debug.apk
    needs:
      - build-samples
      - build-base-samples
    steps:
      - name: "Check if artifacts exist"
        id: check-artifacts
        continue-on-error: true
        run: echo "Checking for sample artifacts..."

      - uses: actions/download-artifact@v4.1.8
        id: download-sample
        continue-on-error: true
        with:
          name: sample-${{ matrix.sample }}-apk

      - uses: actions/download-artifact@v4.1.8
        id: download-base
        continue-on-error: true
        with:
          name: base-sample-${{ matrix.sample }}-apk

      - id: diffuse
        if: steps.download-sample.outcome == 'success' && steps.download-base.outcome == 'success'
        uses: usefulness/diffuse-action@v1
        with:
          old-file-path: ${{ matrix.base-apk-name }}
          new-file-path: ${{ matrix.apk-name }}

      - uses: peter-evans/find-comment@v3
        id: find-comment
        if: ${{ github.event.pull_request && steps.diffuse.outcome == 'success' }}
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: Diffuse output (${{ matrix.sample }})

      - uses: peter-evans/create-or-update-comment@v4
        if: ${{ github.event.pull_request && steps.diffuse.outcome == 'success' }}
        with:
          body: |
            Diffuse output (${{ matrix.sample }} sample):
            
            ${{ steps.diffuse.outputs.diff-gh-comment }}
          edit-mode: replace
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v4.4.0
        if: steps.diffuse.outcome == 'success'
        with:
          name: diffuse-output-${{ matrix.sample }}
          path: ${{ steps.diffuse.outputs.diff-file }}

  ui-tests:
    name: "Android UI Tests"
    runs-on: ubuntu-latest
    if: github.secret_source == 'Actions'
    strategy:
      matrix:
        include:
          - sample: simple
            apk-name: simple-debug.apk
            test-apk-name: simple-debug-androidTest.apk
          - sample: hilt-integration
            apk-name: hilt-integration-debug.apk
            test-apk-name: hilt-integration-debug-androidTest.apk
    needs:
      - build-samples
      - build-test-apks
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - name: "Check if artifacts exist"
        id: check-artifacts
        continue-on-error: true
        run: echo "Checking for test artifacts..."

      - uses: actions/download-artifact@v4.1.8
        id: download-sample
        continue-on-error: true
        with:
          name: sample-${{ matrix.sample }}-apk

      - uses: actions/download-artifact@v4.1.8
        id: download-test
        continue-on-error: true
        with:
          name: test-${{ matrix.sample }}-apk

      - name: "Run tests on emulator.wtf"
        if: steps.download-sample.outcome == 'success' && steps.download-test.outcome == 'success'
        uses: emulator-wtf/run-tests@v0
        with:
          api-token: ${{ secrets.EW_API_TOKEN }}
          app: ${{ matrix.apk-name }}
          test: ${{ matrix.test-apk-name }}
          outputs-dir: build/test-results
          record-video: true
          devices: |
            model=Pixel2,version=35

      - name: "Publish Test Report"
        uses: mikepenz/action-junit-report@v4
        if: always() && steps.download-sample.outcome == 'success' && steps.download-test.outcome == 'success'
        with:
          check_name: "UI Test Report (${{ matrix.sample }})"
          report_paths: 'build/test-results/**/*.xml'

  deploy-docs:
    name: "Deploy Documentation"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs:
      - unit-tests
      - validate-xml
      - ktfmt
      - validate-shell-scripts
      - build-library
      - build-samples
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git-revision-date-localized plugin

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: "Install uv"
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: "Install MkDocs and dependencies"
        working-directory: scripts/docs
        run: uv sync
